# .github/workflows/deploy-nextjs.yml
name: Deploy Next.js site to Railway

on:
  push:
    branches:
      - main # sua branch padr√£o
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: "railway"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect
        run: |
          if [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "installCmd=install" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "installCmd=ci" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.detect.outputs.manager }}

      - name: Cache deps & .next
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            .next/cache
          key: ${{ runner.os }}-nextjs-deps-${{ hashFiles('**/package-lock.json','**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-deps-

      - name: Install dependencies
        working-directory: ./NexoBiiz
        run: ${{ steps.detect.outputs.manager }} ${{ steps.detect.outputs.installCmd }}

      - name: Generate Prisma Client
        working-directory: ./NexoBiiz
        run: npx prisma generate --schema prisma/schema.prisma

      - name: Build Next.js
        working-directory: ./NexoBiiz
        run: ${{ steps.detect.outputs.manager }} run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Purge Cloudflare cache
        shell: bash
        run: |
          echo "üîç Purging Cloudflare zone $ZONE_ID"
          resp=$(curl -w '\nHTTP_STATUS:%{http_code}' \
            -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/purge_cache" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}')
          echo "$resp"
        env:
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Trigger Railway Deploy
        run: |
          curl -X POST https://backboard.railway.app/graphql \
            -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"query":"mutation { deploy(input: { projectId: \"$RAILWAY_PROJECT_ID\" }) { id }}"}'
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN2 }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
